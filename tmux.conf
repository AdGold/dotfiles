# Note that due to race conditions present in the tmux server in versions prior
# to v1.9 the 'if-shell' version detection method used may not work reliably!!

# ------------------------------ Server Options -------------------------------

# Use a 256 colour terminal
if-shell "[ $(tmux -V | awk '{ print ($2 >= 2.1) }') -eq 1 ]" \
    'set -s default-terminal "screen-256color"'

# Remove escape sequence delay
set -s escape-time 0

# Request focus events from the terminal
if-shell "[ $(tmux -V | awk '{ print ($2 >= 1.9) }') -eq 1 ]" \
    'set -s focus-events on'


# ------------------------------ Session Options ------------------------------

# Start window indexing from one
set -g base-index 1

# Use a 256 colour terminal
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.1) }') -eq 1 ]" \
    'set -g default-terminal "screen-256color"'

# Amount of time to display messages
set -g display-time 2000

# Increase the default scrollback
set -g history-limit 20000

# Automatically renumber windows when one is closed
if-shell "[ $(tmux -V | awk '{ print ($2 >= 1.7) }') -eq 1 ]" \
    'set -g renumber-windows on'

# Attempt to set window manager titles
set -g set-titles on

# String to use in window manager titles
set -g set-titles-string "#(whoami)@#h - tmux:#I:#W:#(pwd)"


# ------------------------------ Window Options -------------------------------

# More liberal maximum window sizing
setw -g aggressive-resize on

# Automatically name windows based on running command
setw -g automatic-rename on

# Set the colour of the internal clock mode
setw -g clock-mode-colour magenta

# Set the style of the internal clock mode
setw -g clock-mode-style 12

# Use vi-style key bindings in copy and choice modes
setw -g mode-keys vi

# Monitor activity of the window
setw -g monitor-activity on

# Start pane indexing from one
setw -g pane-base-index 1

# Expect to receive UTF-8 sequences
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.2) }') -eq 1 ]" \
    'setw -g utf8 on'

# Generate xterm-style function key sequences
setw -g xterm-keys on


# ------------------------------- Mouse support -------------------------------

# Integrate with a mouse for copy/paste and selection
if-shell "[ $(tmux -V | awk '{ print ($2 >= 2.1) }') -eq 1 ]" \
    'set -g mouse on' \
    'setw -g mode-mouse on'

# Enable resizing of panes using a mouse
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.1) }') -eq 1 ]" \
    'set -g mouse-resize-pane on'

# Can select by clicking window pane
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.1) }') -eq 1 ]" \
    'set -g mouse-select-pane on'

# Can select by clicking window name (in status line)
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.1) }') -eq 1 ]" \
    'set -g mouse-select-window on'

# Request mouse input as UTF-8 on UTF-8 terminals
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.2) }') -eq 1 ]" \
    'set -g mouse-utf8 on'

# Toggle mouse on
bind m run "if [[ `tmux show-option -w | grep mode-mouse.*off` ]]; then toggle=on; else toggle=off; fi; tmux display-message \"mouse tmux: \$toggle\"; tmux set-option -w mode-mouse \$toggle &> /dev/null; for cmd in mouse-select-pane mouse-resize-pane mouse-select-window; do tmux set-option -g \$cmd \$toggle &> /dev/null; done;"


# -------------------------------- Status line --------------------------------

# Show the status line
set -g status on

# Interval at which to update the status line
set -g status-interval 5

# Use vi-style key bindings in the status line
set -g status-keys vi

# Expect to receive UTF-8 sequences in the status line
if-shell "[ $(tmux -V | awk '{ print ($2 < 2.2) }') -eq 1 ]" \
    'set -g status-utf8 on'

# Update status line on activity (needs monitor-activity)
set -g visual-activity on

# Use our custom status line designed to mirror our original screen status bar
source-file ~/.config/tmux/screenline.conf

# Use tmuxline generated status line
source-file ~/.config/tmux/tmuxline.conf


# ------------------------------- Key Bindings --------------------------------

# Override the default command prefix
unbind C-b
set -g prefix C-a

# Binding for sending commands to nested sessions
bind a send-prefix

# Use the current working directory for new windows/panes
bind c new-window -c "#{pane_current_path}"
unbind-key s
bind-key -n M-s split-window -v -c "#{pane_current_path}"
bind s split-window -c "#{pane_current_path}"
bind-key -n M-v split-window -h -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Shortcut keys for previous/next window
bind C-p previous-window
bind C-n next-window

# More intelligent "last active" switching (credit to arrayjam)
bind-key C-a if-shell 'test $(tmux list-panes | wc -l) -gt 1' 'last-pane' 'last-window'

# Reload the tmux configuration
bind r source-file ~/.tmux.conf\; display-message "Reloaded .tmux.conf!"

# Toggle the status line
bind e set status

# Synchronise input across panes
bind S setw synchronize-panes

# Vim style selection and copy
# if-shell "[ $(tmux -V | awk '{ print ($2 >= 2.4) }') -eq 1 ]" \
    # 'bind -T copy-mode-vi v send-keys -X begin-selection' \
    # 'bind -t vi-copy v begin-selection'
# if-shell "[ $(tmux -V | awk '{ print ($2 >= 2.4) }') -eq 1 ]" \
    # 'bind -T copy-mode-vi y send-keys -X copy-selection' \
    # 'bind -t vi-copy y copy-selection'
# bind -T copy-mode-vi y send -X copy-pipe "xsel -ib"
# bind -t vi-copy y copy-selection

# bind-key -t vi-copy y copy-pipe "xsel -ib"

# Open a man page in a new window
bind / command-prompt "split-window 'exec man %%'"

# Open a process viewer in a new window
bind "~" split-window "if command -v htop > /dev/null; then htop; else top; fi"

unbind f
bind f split-window -c "#{pane_current_path}" "ranger"

# unbind -T vi-copy C-j
unbind-key C-j
bind-key -n C-j previous-window
unbind-key C-k
bind-key -n C-k next-window
# Remap window navigation to vim
unbind-key j
bind-key j select-pane -D
unbind-key M-j
bind -n M-j select-pane -D
unbind-key k
bind-key k select-pane -U
bind -n M-k select-pane -U
unbind-key h
unbind-key M-h
bind-key h select-pane -L
bind -n M-h select-pane -L
unbind-key l
unbind-key M-l
bind-key l select-pane -R
bind -n M-l select-pane -R
bind -n M-h select-pane -L  
bind -n M-j select-pane -D  
bind -n M-k select-pane -U  
bind -n M-l select-pane -R
