#!/usr/bin/xonsh

# Startx if needed
if not $DISPLAY and $XDG_VTNR == '1':
    startx

# General settings
$VI_MODE = True

# Aliases
source ~/dotfiles/xonshalias.xsh

# Common imports to make command line usage nicer
from math import *
from datetime import datetime
import os
import sys
import time
import string

# Prompt

# Prompt layouts
# $PROMPT = '{env_name}{rtn_colour}➜  {BOLD_#00BFFF}{cwd}{branch_bg_color}{NO_COLOR}{branch_color}{curr_branch}{NO_COLOR}{git_indicator} {BACKGROUND_#00BFFF}{NO_COLOR}{BOLD_#00BFFF}{prompt_end}{NO_COLOR} '
$PROMPT = '{env_name}{BACKGROUND_BLUE}{WHITE}{user}@{hostname}{BLUE}{BACKGROUND_#00BFFF}{WHITE} {cwd}{#00BFFF}{bg_branch_color}{WHITE}{curr_branch}{BACKGROUND_BLACK}{branch_color} {NO_COLOR}'
$RIGHT_PROMPT = '{rtn_value}{BLUE}{BACKGROUND_BLUE}{WHITE}{curr_time} '
$MULTILINE_PROMPT = '{BOLD_#00BFFF}.{NO_COLOR}'


# Conditional maker helper
def _eval(s):
    return s if isinstance(s, str) else s()
def _cond(cond, t, f='', base='%s'):
    return lambda: base % _eval(t if cond() else f)

# GIT stuff
from xonsh.environ import git_dirty_working_directory, current_branch
_dirty = lambda: git_dirty_working_directory(include_untracked=True)
$FORMATTER_DICT['branch_color'] = _cond(_dirty, '{BOLD_INTENSE_RED}', '{BOLD_INTENSE_GREEN}')
$FORMATTER_DICT['branch_color'] = _cond(_dirty, '{INTENSE_RED}', '{INTENSE_GREEN}')
$FORMATTER_DICT['bg_branch_color'] = _cond(_dirty, '{BACKGROUND_#FF0000}', '{BACKGROUND_#00FF00}')
$FORMATTER_DICT['git_indicator'] = _cond(_dirty, '✗')
# $FORMATTER_DICT['curr_branch'] = _cond(current_branch, lambda: ' (%s)' % current_branch().strip())
$FORMATTER_DICT['curr_branch'] = lambda: current_branch().replace(' ', '  ')

# Return value
_rtn_err = lambda: __xonsh_history__.rtns and __xonsh_history__.rtns[-1] != 0
$FORMATTER_DICT['rtn_colour'] = _cond(_rtn_err, '{BOLD_#FF0000}', '{BOLD_#00EE00}')
$FORMATTER_DICT['rtn_value'] = _cond(_rtn_err, lambda: '{#FF0000}{BACKGROUND_#FF0000}{WHITE}[%d]' % __xonsh_history__.rtns[-1] )

# Current time
$FORMATTER_DICT['curr_time'] = lambda: datetime.strftime(datetime.now(), '%H:%M')

# Fancy prompt maker
def make_fancy_prompt(parts):
    res = ''
    last = None
    for (txt, bg, fg) in parts:
        if last:
            res += '{%s}{BACKGROUND_%s}{%s}' % (last, bg, fg)
        res += txt
        last = bg
    return res

# Autojump setup
import os
$AUTOJUMP_DIR = os.path.join($HOME, 'dotfiles/autojump-xonsh')
source @(os.path.join($AUTOJUMP_DIR, 'autojump.xsh'))
